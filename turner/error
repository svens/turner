#pragma once // -*- C++ -*-

/**
 * \file turner/error
 * Turner library error codes
 */

#include <turner/__bits/lib>
#include <pal/result>
#include <system_error>


__turner_begin


#define __turner_errc(Impl) \
	Impl(__0, "internal placeholder for not an error") \
	Impl(invalid_magic_cookie, "invalid magic cookie") \
	Impl(unexpected_message_type, "unexpected message type") \
	Impl(unexpected_message_length, "unexpected message length") \
	Impl(unexpected_attribute_value, "unexpected attribute value") \
	Impl(unexpected_attribute_length, "unexpected attribute length") \
	Impl(fingerprint_not_last, "fingerprint not last") \
	Impl(fingerprint_mismatch, "fingerprint mismatch") \
	Impl(attribute_not_found, "attribute not found")


/**
 * Turner error codes
 */
enum class errc: int
{
	#define __turner_errc_impl(code, message) code,
	__turner_errc(__turner_errc_impl)
	#undef __turner_errc_impl
};


/**
 * Return Turner error category. The name() virtual function returns "turner".
 */
const std::error_category &error_category () noexcept;


/**
 * Make std::error_code from error code \a ec
 */
inline std::error_code make_error_code (errc ec) noexcept
{
	return {static_cast<int>(ec), error_category()};
}


/**
 * Returns unexpected{make_error_code(ec)}
 */
inline pal::unexpected<std::error_code> make_unexpected (errc ec) noexcept
{
	return pal::unexpected{make_error_code(ec)};
}


namespace __bits {

inline void unexpected_message_type ()
{
	struct unexpected_message_type: std::exception
	{
		const char *what () const noexcept override
		{
			return "unexpected message type";
		}
	};
	throw unexpected_message_type{};
}

} // namespace __bits


__turner_end


namespace std {

template <>
struct is_error_code_enum<turner::errc>
	: true_type
{ };

} // namespace std
