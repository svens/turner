#pragma once // -*- C++ -*-

/**
 * \file turner/stun
 * STUN protocol
 */

#include <turner/__bits/lib>
#include <turner/basic_message_reader>
#include <turner/message_type>
#include <pal/result>
#include <array>


__turner_begin


class stun
{
public:

	/// STUN message transaction ID (96 bits)
	using transaction_id_type = std::array<uint8_t, 12>;

	/// STUN message Magic Cookie
	static constexpr uint32_t magic_cookie = 0x21'12'a4'42;

	/// \defgroup STUN_Methods STUN Method registry
	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-18.2
	/// \{

	/// STUN Binding request
	static constexpr auto binding = message_type<stun>::request<0x0001>();

	/// STUN Binding success response
	static constexpr auto binding_success = binding.success_response();

	/// \}

	/// Generic STUN message reader
	using message_reader = basic_message_reader<stun>;

	/**
	 * Validates \a span contains STUN message and returns generic message reader
	 *
	 * \note This method does not check for valid STUN message type, only
	 * message structure validity
	 */
	static pal::result<message_reader> read (std::span<const std::byte> span) noexcept
	{
		return message_reader{span};
	}

private:

	static constexpr size_t transaction_id_offset = 8;
	friend class basic_message_reader<stun>;
};


__turner_end
