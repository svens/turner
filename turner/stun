#pragma once // -*- C++ -*-

/**
 * \file turner/stun
 * STUN protocol
 */

#include <turner/attribute_type>
#include <turner/attribute_value_type>
#include <turner/message_reader>
#include <turner/message_type>
#include <pal/result>
#include <array>
#include <span>

namespace turner {

/**
 * STUN protocol requests/attributes
 *
 * \see https://datatracker.ietf.org/doc/html/rfc8489
 *
 * \note Missing attribute types:
 * - message_integrity_sha256 = 0x001c;
 * - password_algorithm = 0x001d;
 * - userhash = 0x001e;
 * - password_algorithms = 0x8002;
 */
struct stun
{
	/// STUN message header size
	static constexpr size_t header_size_bytes = 20;

	/// STUN message attribute padding boundary
	static constexpr size_t pad_size_bytes = 4;

	/// Magic Cookie offset from beginning of message
	static constexpr size_t cookie_offset = 4;

	/// STUN message cookie type
	using cookie_type = std::array<uint8_t, 4>;

	/// STUN message Magic Cookie value
	static constexpr cookie_type magic_cookie = { 0x21, 0x12, 0xa4, 0x42, };

	/// Transaction ID offset from beginning of message
	static constexpr size_t transaction_id_offset = 8;

	/// STUN message transaction ID type
	using transaction_id_type = std::array<uint8_t, 12>;

	/// Generic STUN message reader
	using message_reader = turner::message_reader<stun>;

	/**
	 * \defgroup STUN_Methods STUN Method registry
	 * \see https://datatracker.ietf.org/doc/html/rfc8489#section-18.2
	 * \{
	 */

	/// STUN Binding request
	static constexpr auto binding = request<stun, 0x0001>;

	/// \}

	/// \cond
	using endpoint_value_type = turner::endpoint_value_type<stun>;
	using xor_endpoint_value_type = turner::xor_endpoint_value_type<stun>;
	/// \endcond

	/**
	 * \defgroup STUN_Attributes STUN Attribute Registry
	 * \see https://datatracker.ietf.org/doc/html/rfc8489#section-18.3
	 * \{
	 */

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.1
	static constexpr auto mapped_address = attribute<stun, endpoint_value_type, 0x0001>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.3
	static constexpr auto username = attribute<stun, string_value_type<513>, 0x0006>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.5
	static constexpr auto message_integrity = attribute<stun, bytes_value_type<20>, 0x0008>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.8
	static constexpr auto error_code = attribute<stun, error_code_value_type, 0x0009>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.13
	static constexpr auto unknown_attributes = attribute<stun, attribute_list_value_type, 0x000a>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.9
	static constexpr auto realm = attribute<stun, string_value_type<763>, 0x0014>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.10
	static constexpr auto nonce = attribute<stun, string_value_type<763>, 0x0015>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.2
	static constexpr auto xor_mapped_address = attribute<stun, xor_endpoint_value_type, 0x0020>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.16
	static constexpr auto alternate_domain = attribute<stun, string_value_type<255>, 0x8003>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.14
	static constexpr auto software = attribute<stun, string_value_type<763>, 0x8022>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.15
	static constexpr auto alternate_server = attribute<stun, endpoint_value_type, 0x8023>;

	/// \see https://datatracker.ietf.org/doc/html/rfc8489#section-14.7
	static constexpr auto fingerprint = attribute<stun, uint32_value_type, 0x8028>;

	/// \}

	/**
	 * Validates \a span contains STUN message and returns generic message reader
	 *
	 * \note This method does not check for known STUN message/attribute types,
	 * only message structure validity.
	 *
	 * \see https://datatracker.ietf.org/doc/html/rfc8489#section-5
	 */
	static pal::result<message_reader> read_message (const std::span<const std::byte> &span) noexcept;
};

} // namespace turner
