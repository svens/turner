#pragma once // -*- C++ -*-

/**
 * \file turner/attribute_type
 * Protocol-specific generic attribute type
 */

#include <cstdint>

namespace turner {

/// Define \a protocol message attribute type
template <typename Protocol, typename ValueType, uint16_t Type>
struct attribute_type
{
	/// Protocol that defines attribute type
	using protocol_type = Protocol;

	/// Attribute value type
	using value_type = ValueType;

	/// Attribute type
	static constexpr uint16_t type = Type;

	/// True if application is required to handle attribute
	static constexpr bool is_comprehension_required = 0x0000 <= type && type <= 0x7fff;

	/// True if application may safely skip handling attribute
	static constexpr bool is_comprehension_optional = 0x8000 <= type && type <= 0xffff;
};

/// Generic protocol message attribute type instance
template <typename Protocol, typename ValueType, uint16_t Type>
constexpr auto attribute = attribute_type<Protocol, ValueType, Type>{};

} // namespace turner
