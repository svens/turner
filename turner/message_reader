#pragma once // -*- C++ -*-

/**
 * \file turner/message_reader
 * Protocol-specific generic message reader
 */

#include <turner/__view>
#include <turner/attribute_type>
#include <turner/message_type>
#include <turner/error>
#include <pal/byte_order>
#include <pal/result>
#include <span>

namespace turner {

struct msturn;

/// Generic message reader
template <typename Protocol>
class message_reader
{
public:

	/// Protocol that defines this message type.
	using protocol_type = Protocol;

	/// Message transaction ID type
	using transaction_id_type = typename Protocol::transaction_id_type;

	/// Returns message wire format as byte blob
	std::span<const std::byte> as_bytes () const noexcept
	{
		return span_;
	}

	/// Returns true if reader contains \a message
	template <typename OtherProtocol, uint16_t Method, uint16_t Class>
		requires(std::is_convertible_v<Protocol, OtherProtocol>)
	bool expect (const message_type<OtherProtocol, Method, Class> &message) const noexcept
	{
		return type_ == message.type;
	}

	/// Returns \a this message transaction ID
	const transaction_id_type &transaction_id () const noexcept
	{
		return *reinterpret_cast<const transaction_id_type *>(
			span_.data() + Protocol::transaction_id_offset
		);
	}

	/// Returns value of \a attribute
	template <typename OtherProtocol, typename ValueType, uint16_t Type>
		requires(std::is_convertible_v<Protocol, OtherProtocol>)
	pal::result<typename ValueType::native_value_type> read (
		const attribute_type<OtherProtocol, ValueType, Type> &) const noexcept
	{
		if (auto a = __view::as_message<Protocol>(span_)->find(Type))
		{
			return ValueType::read(*this, a->value());
		}
		return make_unexpected(errc::attribute_not_found);
	}

private:

	uint16_t type_;
	std::span<const std::byte> span_;

	message_reader (const std::span<const std::byte> &span) noexcept
		: type_{pal::ntoh(*reinterpret_cast<const uint16_t *>(span.data()))}
		, span_{span}
	{ }

	friend Protocol;
};

} // namespace turner
