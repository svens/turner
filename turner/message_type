#pragma once // -*- C++ -*-

/**
 * \file turner/message_type
 * Protocol-specific concrete message type
 */

#include <turner/__bits/lib>
#include <turner/fwd>


__turner_begin


/// Define \a Protocol message type.
template <typename Protocol>
class message_type
{
public:

	/// Protocol that defines this message type.
	using protocol_type = Protocol;

	/// Message type numeric value (in host byte order).
	const uint16_t value;

	/// Returns method type for Protocol of request class.
	template <uint16_t Method>
	static constexpr message_type request () noexcept
	{
		static_assert((Method & 0b1100'0000'0000'0000) == 0,
			"invalid message type"
		);
		return {Method};
	}

	/// Returns method type for Protocol of success response class.
	constexpr message_type success_response () const noexcept
	{
		const uint16_t v = value | 0b0000'0001'0000'0000;
		return {v};
	}

	/// Returns method type for Protocol of success response class.
	constexpr message_type error_response () const noexcept
	{
		const uint16_t v = value | 0b000'0001'0001'0000;
		return {v};
	}

	/// Returns true if this message type is same as \a that message type.
	constexpr bool operator== (message_type that) const noexcept
	{
		return value == that.value;
	}

	/// Returns true if this message type is not same as \a that message type.
	constexpr bool operator!= (message_type that) const noexcept
	{
		return value != that.value;
	}

private:

	message_type () = delete;

	constexpr message_type (uint16_t value)
		: value{value}
	{ }

	friend class basic_message_reader<Protocol>;
};

/// Returns true if message type \a left value is same as \a right.
template <typename Protocol>
constexpr bool operator== (message_type<Protocol> left, uint16_t right) noexcept
{
	return left.value == right;
}

/// Returns true if message type \a right value is same as \a left.
template <typename Protocol>
constexpr bool operator== (uint16_t left, message_type<Protocol> right) noexcept
{
	return left == right.value;
}

/// Returns true if message type \a left value is not same as \a right.
template <typename Protocol>
constexpr bool operator!= (message_type<Protocol> left, uint16_t right) noexcept
{
	return left.value != right;
}

/// Returns true if message type \a right value is not same as \a left.
template <typename Protocol>
constexpr bool operator!= (uint16_t left, message_type<Protocol> right) noexcept
{
	return left != right.value;
}


__turner_end
