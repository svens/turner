#pragma once // -*- C++ -*-

/**
 * \file turner/attribute_value_type
 * Attribute value reader/writer
 */

#include <turner/error>
#include <turner/fwd>
#include <turner/protocol_error>
#include <pal/byte_order>
#include <pal/net/ip/address>
#include <pal/result>
#include <array>
#include <chrono>
#include <span>
#include <string_view>

namespace turner {

/// Generic uint32_t type attribute value reader/writer
struct uint32_value_type
{
	/// Native value type
	using native_value_type = uint32_t;

	/// Read attribute value from \a span
	template <typename Protocol>
	static pal::result<native_value_type> read (
		const message_reader<Protocol> &,
		const std::span<const std::byte> &span) noexcept
	{
		if (span.size_bytes() == sizeof(native_value_type))
		{
			return pal::ntoh(*reinterpret_cast<const native_value_type *>(span.data()));
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}
};

/// Generic std::chrono::seconds type attribute value reader/writer
struct seconds_value_type
{
	/// Native value type
	using native_value_type = std::chrono::seconds;

	/// Read attribute value from \a span
	template <typename Protocol>
	static pal::result<native_value_type> read (
		const message_reader<Protocol> &message,
		const std::span<const std::byte> &span) noexcept
	{
		return uint32_value_type::read(message, span).transform([](auto value)
		{
			return native_value_type{value};
		});
	}
};

/// Address family values for STUN/TURN/MS-TURN protocols
enum class address_family: uint8_t
{
	v4 = 0x01, ///< IPv4
	v6 = 0x02, ///< IPv6
};

/// Address family attribute value reader/writer
struct address_family_value_type
{
	/// Native value type
	using native_value_type = address_family;

	/// Read attribute value from \a span
	template <typename Protocol>
	static pal::result<native_value_type> read (
		const message_reader<Protocol> &,
		const std::span<const std::byte> &span) noexcept
	{
		if (span.size_bytes() == sizeof(uint32_t))
		{
			auto v = *reinterpret_cast<const native_value_type *>(span.data());
			if (v == address_family::v4 || v == address_family::v6)
			{
				return v;
			}
			return make_unexpected(errc::unexpected_attribute_value);
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}
};

/// Transport protocol for allocated transport address
/// \see https://www.iana.org/assignments/protocol-numbers
enum class transport_protocol: uint8_t
{
	tcp = 6,
	udp = 17,
};

/// Transport protocol attribute value reader/writer
struct transport_protocol_value_type
{
	/// Native value type
	using native_value_type = transport_protocol;

	/// Read attribute value from \a span
	template <typename Protocol>
	static pal::result<native_value_type> read (
		const message_reader<Protocol> &,
		const std::span<const std::byte> &span) noexcept
	{
		if (span.size_bytes() == sizeof(uint32_t))
		{
			auto v = *reinterpret_cast<const native_value_type *>(span.data());
			if (v == transport_protocol::udp || v == transport_protocol::tcp)
			{
				return v;
			}
			return make_unexpected(errc::unexpected_attribute_value);
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}
};

/// Generic std::string_view type attribute value reader/writer
template <size_t MaxSizeBytes = std::dynamic_extent>
struct string_value_type
{
	/// Native value type
	using native_value_type = std::string_view;

	/**
	 * Read attribute value from \a span
	 *
	 * \note returned std::string_view does not own specified range, it
	 * points into \a span. Caller should copy value if needed.
	 */
	template <typename Protocol>
	static pal::result<native_value_type> read (
		const message_reader<Protocol> &,
		const std::span<const std::byte> &span) noexcept
	{
		if constexpr (MaxSizeBytes != std::dynamic_extent)
		{
			if (span.size_bytes() > MaxSizeBytes)
			{
				return make_unexpected(errc::unexpected_attribute_length);
			}
		}
		return native_value_type{
			reinterpret_cast<const char *>(span.data()),
			span.size_bytes()
		};
	}
};

/// Generic std::span<std::byte, Extent> type attribute value reader/writer
template <size_t Extent = std::dynamic_extent>
struct bytes_value_type
{
	/// Native value type
	using native_value_type = std::span<const std::byte, Extent>;

	/**
	 * Read attribute value from \a span
	 *
	 * \note returned std::span does not own specified range, it
	 * points into \a span. Caller should copy value if needed.
	 */
	template <typename Protocol>
	static pal::result<native_value_type> read (
		const message_reader<Protocol> &,
		const std::span<const std::byte> &span) noexcept
	{
		if constexpr (Extent != std::dynamic_extent)
		{
			if (span.size_bytes() != Extent)
			{
				return make_unexpected(errc::unexpected_attribute_length);
			}
		}
		return native_value_type{span};
	}
};

/// Generic protocol error type attribute value reader/writer
struct error_code_value_type
{
	/// Native value type
	struct native_value_type
	{
		protocol_errc code;
		std::string_view reason;
	};

	/**
	 * Read attribute value from \a span
	 *
	 * \note returned native_value_type reason field does not own specified
	 * range, it points into \a span. Caller should copy value if needed.
	 */
	template <typename Protocol>
	static pal::result<native_value_type> read (
		const message_reader<Protocol> &,
		const std::span<const std::byte> &span) noexcept
	{
		static constexpr auto min_size_bytes = 4 * sizeof(uint8_t);
		if (span.size_bytes() >= min_size_bytes)
		{
			auto data = reinterpret_cast<const char *>(span.data());
			return native_value_type
			{
				.code = (protocol_errc)((data[2] & 0b0000'0111) * 100 + data[3]),
				.reason = std::string_view{
					data + min_size_bytes,
					span.size_bytes() - min_size_bytes
				}
			};
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}
};

/**
 * Attribute list type value reader/writer.
 *
 * \note native_value_type::list supports up to 4 elements, even though underlying
 * Protocol does not limit this number. If attribute in \a span contains more
 * elements, only up to 4 are copied but returned native_value_type::size field
 * reflects actual number.
 */
struct attribute_list_value_type
{
	/// Native value type
	struct native_value_type
	{
		size_t size;
		std::array<uint16_t, 4> list;
	};

	/**
	 * Read attribute value from \a span.
	 *
	 * \note returned std::span does not own specified range, it points
	 * into \a span. Caller should copy value if needed. Values are in
	 * network byte order.
	 */
	template <typename Protocol>
	static pal::result<native_value_type> read (
		const message_reader<Protocol> &,
		const std::span<const std::byte> &span) noexcept
	{
		auto size = span.size_bytes() / sizeof(uint16_t);
		if (size * sizeof(uint16_t) == span.size_bytes())
		{
			native_value_type result{size, {}};
			size = (std::min)(size, result.list.max_size());
			auto *src = reinterpret_cast<const uint16_t *>(span.data());
			std::transform(src, src + size, result.list.begin(), ntoh);
			return result;
		}

		return make_unexpected(errc::unexpected_attribute_length);
	}


private:

	static constexpr auto ntoh = [](uint16_t v)
	{
		return pal::ntoh(v);
	};
};

/**
 * Internet address/port pair type value reader/writer.
 *
 * Template argument Map is endpoint transformer before returning value to
 * caller. STUN/TURN/MS-TURN currently support XOR transformation. For simple
 * endpoints, protocols use no-op handler.
 */
template <typename Map>
struct basic_endpoint_value_type
{
	/// Native value type
	struct native_value_type
	{
		pal::net::ip::address address;
		uint16_t port;
	};

	/// Read attribute value from \a span
	template <typename Protocol>
	static pal::result<native_value_type> read (
		const message_reader<Protocol> &message,
		const std::span<const std::byte> &span) noexcept
	{
		if (span.size_bytes() == 8)
		{
			return read_ipv4(span).and_then(transform_with(message));
		}
		else if (span.size_bytes() == 20)
		{
			return read_ipv6(span).and_then(transform_with(message));
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}

private:

	static address_family family (const std::span<const std::byte> &span) noexcept
	{
		return reinterpret_cast<const address_family *>(span.data())[1];
	}

	static uint16_t port (const std::span<const std::byte> &span) noexcept
	{
		return reinterpret_cast<const uint16_t *>(span.data())[1];
	}

	template <typename Address>
	static pal::net::ip::address address (const std::span<const std::byte> &span) noexcept
	{
		if constexpr (pal::compiler == pal::compiler_type::gnu && pal::build == pal::build_type::release)
		{
			// TODO: g++ claims 'else' part has unininitialized bytes
			pal::net::ip::address result{};
			result = Address{*reinterpret_cast<const typename Address::bytes_type *>(span.data() + 4)};
			return result;
		}
		else
		{
			return Address{*reinterpret_cast<const typename Address::bytes_type *>(span.data() + 4)};
		}
	}

	static pal::result<native_value_type> read_ipv4 (const std::span<const std::byte> &span) noexcept
	{
		if (family(span) == address_family::v4)
		{
			return native_value_type
			{
				.address = address<pal::net::ip::address_v4>(span),
				.port = port(span)
			};
		}
		return make_unexpected(errc::unexpected_attribute_value);
	}

	static pal::result<native_value_type> read_ipv6 (const std::span<const std::byte> &span) noexcept
	{
		if (family(span) == address_family::v6)
		{
			return native_value_type
			{
				.address = address<pal::net::ip::address_v6>(span),
				.port = port(span)
			};
		}
		return make_unexpected(errc::unexpected_attribute_value);
	}

	template <typename Protocol>
	static auto transform_with (const message_reader<Protocol> &message) noexcept
	{
		return [&](native_value_type &&endpoint) -> pal::result<native_value_type>
		{
			Map::transform(message.as_bytes(), endpoint.address, endpoint.port);
			endpoint.port = pal::ntoh(endpoint.port);
			return std::move(endpoint);
		};
	}
};

namespace __attribute_value_type {

struct no_op
{
	static void transform (
		const std::span<const std::byte> &,
		pal::net::ip::address &,
		uint16_t &) noexcept
	{ }
};

struct xor_op
{
	static void transform (
		const std::span<const std::byte> &message_bytes,
		pal::net::ip::address &address,
		uint16_t &port
	) noexcept;
};

} // namespace __attribute_value_type

/**
 * Internet address/port pair type value reader/writer.
 *
 * \see basic_endpoint_value_type<>
 */
template <typename Protocol>
using endpoint_value_type = basic_endpoint_value_type<__attribute_value_type::no_op>;

/**
 * Internet address/port pair type value reader/writer.
 *
 * Value is obfuscated using XOR operation. While STUN and MS-TURN document
 * different values for XORing, in practise both refer to same region in
 * message. This allows to have single implementation for both protocols.
 *
 * \see basic_endpoint_value_type<>
 */
template <typename Protocol>
using xor_endpoint_value_type = basic_endpoint_value_type<__attribute_value_type::xor_op>;

} // namespace turner
