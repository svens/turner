#pragma once // -*- C++ -*-

/**
 * \file turner/attribute_value_type
 * Attribute value reader/writer
 */

#include <turner/__bits/lib>
#include <turner/error>
#include <turner/fwd>
#include <pal/byte_order>
#include <pal/result>
#include <chrono>
#include <span>


__turner_begin


/// Generic uint32_t type attribute reader/writer
struct uint32_value_type
{
	/// Native value type
	using value_type = uint32_t;

	/// Read attribute value from \a span
	template <typename Protocol>
	static pal::result<value_type> read (
		const basic_message_reader<Protocol> &,
		std::span<const std::byte> span) noexcept
	{
		if (span.size_bytes() == sizeof(value_type))
		{
			return pal::ntoh(*reinterpret_cast<const value_type *>(span.data()));
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}
};


/// Generic std::chrono::seconds type attribute reader/writer
struct seconds_value_type
{
	/// Native value type
	using value_type = std::chrono::seconds;

	/// Read attribute value from \a span
	template <typename Protocol>
	static pal::result<value_type> read (
		const basic_message_reader<Protocol> &message,
		std::span<const std::byte> span) noexcept
	{
		return uint32_value_type::read(message, span).map([](auto value)
		{
			return value_type{value};
		});
	}
};


__turner_end
