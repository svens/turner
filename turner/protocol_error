#pragma once // -*- C++ -*-

/**
 * \file turner/protocol_error
 * STUN family protocols' errors
 */

#include <system_error>

namespace turner {

#define __turner_protocol_errc(Impl) \
	Impl(300, try_alternate, "Try Alternate") \
	Impl(400, bad_request, "Bad Request") \
	Impl(401, unauthorized, "Unauthorized") \
	Impl(403, forbidden, "Forbidden") \
	Impl(420, unknown_attribute, "Unknown Attribute") \
	Impl(431, integrity_check_failure, "Integrity Check Failure") \
	Impl(432, missing_username, "Missing Username") \
	Impl(434, missing_realm, "Missing Realm") \
	Impl(435, missing_nonce, "Missing Nonce") \
	Impl(436, unknown_user, "Unknown User") \
	Impl(437, allocation_mismatch, "Allocation Mismatch") \
	Impl(438, stale_nonce, "Stale Nonce") \
	Impl(440, unsupported_address_family, "Unsupported Address Family") \
	Impl(441, wrong_credentials, "Wrong Credentials") \
	Impl(442, unsupported_transport_protocol, "Unsupported Transport Protocol") \
	Impl(443, peer_address_family_mismatch, "Peer Address Family Mismatch") \
	Impl(486, allocation_quota_reached, "Allocation Quota Reached") \
	Impl(500, server_error, "Server Error")

/// STUN family protocols' error codes
enum class protocol_errc: uint16_t
{
	#define __turner_errc_impl(value, symbol, message) symbol = value,
	__turner_protocol_errc(__turner_errc_impl)
	#undef __turner_errc_impl
};

/// Return Turner protocol error category. The name() virtual function returns "turner::protocol".
const std::error_category &protocol_error_category () noexcept;

/// Make std::error_code from error code \a ec
inline std::error_code make_error_code (protocol_errc ec) noexcept
{
	return std::error_code(static_cast<int>(ec), protocol_error_category());
}

} // namespace turner

namespace std {

template <>
struct is_error_code_enum<turner::protocol_errc>
	: true_type
{ };

} // namespace std
