#pragma once // -*- C++ -*-

/**
 * \file turner/turn
 * TURN protocol
 */

#include <turner/__bits/lib>
#include <turner/stun>


__turner_begin


/**
 * TURN protocol requests/attributes
 *
 * \see https://datatracker.ietf.org/doc/html/rfc8656
 */
struct turn: stun
{
	/**
	 * \defgroup TURN_Methods TURN Method registry
	 * \see https://datatracker.ietf.org/doc/html/rfc8656#section-17
	 * \{
	 */

	/// TURN Binding request
	static constexpr message_type<turn> allocate = 0x0003;

	/// TURN Binding success response
	static constexpr auto allocate_success = allocate.success_response();

	/// TURN Binding error response
	static constexpr auto allocate_error = allocate.error_response();

	/// TURN Refresh request
	static constexpr message_type<turn> refresh = 0x0004;

	/// TURN Refresh success response
	static constexpr auto refresh_success = refresh.success_response();

	/// TURN Refresh error response
	static constexpr auto refresh_error = refresh.error_response();

	/// TURN Send indication
	static constexpr message_type<turn> send_indication = 0x0006;

	/// TURN Data indication
	static constexpr message_type<turn> data_indication = 0x0007;

	/// TURN CreatePermission request
	static constexpr message_type<turn> create_permission = 0x0008;

	/// TURN CreatePermission success response
	static constexpr auto create_permission_success = create_permission.success_response();

	/// TURN CreatePermission error response
	static constexpr auto create_permission_error = create_permission.error_response();

	/// TURN ChannelBind request
	static constexpr message_type<turn> channel_bind = 0x0009;

	/// TURN ChannelBind success response
	static constexpr auto channel_bind_success = channel_bind.success_response();

	/// TURN ChannelBind error response
	static constexpr auto channel_bind_error = channel_bind.error_response();

	/// \}

	struct channel_number_value_type;
	struct even_port_value_type;
	struct dont_fragment_value_type;
	struct address_error_code_value_type;

	/**
	 * \defgroup TURN_Attributes TURN Attribute Registry
	 * \see https://datatracker.ietf.org/doc/html/rfc8656#section-18
	 * \{
	 */

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.1
	static constexpr attribute_type<turn, channel_number_value_type> channel_number = 0x000c;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.2
	static constexpr attribute_type<turn, seconds_value_type> lifetime = 0x000d;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.3
	static constexpr attribute_type<turn, xor_endpoint_value_type> xor_peer_address = 0x0012;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.4
	static constexpr attribute_type<turn, bytes_value_type<>> data = 0x0013;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.5
	static constexpr attribute_type<turn, xor_endpoint_value_type> xor_relayed_address = 0x0016;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.6
	static constexpr attribute_type<turn, address_family_value_type> requested_address_family = 0x0017;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.7
	static constexpr attribute_type<turn, even_port_value_type> even_port = 0x0018;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.8
	static constexpr attribute_type<turn, transport_protocol_value_type> requested_transport = 0x0019;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.9
	static constexpr attribute_type<turn, dont_fragment_value_type> dont_fragment = 0x001a;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.10
	static constexpr attribute_type<turn, bytes_value_type<8>> reservation_token = 0x0022;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.11
	static constexpr attribute_type<turn, address_family_value_type> additional_address_family = 0x8000;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.12
	static constexpr attribute_type<turn, address_error_code_value_type> address_error_code = 0x8001;

	/// \see https://datatracker.ietf.org/doc/html/rfc8656#section-18.13
	static constexpr attribute_type<turn, uint16_t> icmp = 0x8004;

	/// \}

	/// Generic TURN message reader
	using message_reader = basic_message_reader<turn>;

	/**
	 * Validates \a span contains TURN message and returns generic message reader
	 *
	 * \note This method does not check for known TURN message/attribute types,
	 * only message structure validity (i.e. STUN message structure).
	 *
	 * \see https://datatracker.ietf.org/doc/html/rfc8489#section-5
	 */
	static pal::result<message_reader> read_message (std::span<const std::byte> span) noexcept
	{
		return stun::read_message(span).map([](auto stun_reader)
		{
			// on success map to TURN-specific reader
			return message_reader{stun_reader.as_bytes()};
		});
	}
};


/// TURN channel number value attribute value type reader/writer
struct turn::channel_number_value_type
{
	/// Native value type
	using value_type = uint16_t;

	/// Read attribute value from \a span
	static pal::result<value_type> read (
		const basic_message_reader<turn> &,
		std::span<const std::byte> span) noexcept
	{
		if (span.size_bytes() == sizeof(uint32_t))
		{
			auto channel = pal::ntoh(*reinterpret_cast<const uint16_t *>(span.data()));
			if (0x3fff < channel && channel < 0x8000)
			{
				return channel;
			}
			return make_unexpected(errc::unexpected_attribute_value);
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}
};


/// TURN EVEN-PORT attribute value reader/writer
struct turn::even_port_value_type
{
	/// Native value type
	using value_type = bool;

	/// Read attribute value from \a span
	template <typename Protocol>
	static pal::result<value_type> read (
		const basic_message_reader<Protocol> &,
		std::span<const std::byte> span) noexcept
	{
		if (span.size_bytes() == 1)
		{
			static constexpr uint8_t r = 0b1000'0000;
			auto v = *reinterpret_cast<const uint8_t *>(span.data());
			return (v & r) == r;
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}
};


/// TURN DONT-FRAGMENT attribute value reader/writer
struct turn::dont_fragment_value_type
{
	/// Native value type
	using value_type = bool;

	/// Read attribute value from \a span
	template <typename Protocol>
	static pal::result<value_type> read (
		const basic_message_reader<Protocol> &,
		std::span<const std::byte> span) noexcept
	{
		if (span.size_bytes() == 0)
		{
			// simply attribute existence -> true
			return true;
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}
};


/// TURN ADDRESS-ERROR-CODE attribute value reader/writer
struct turn::address_error_code_value_type
{
	/// Native value type
	struct value_type
	{
		address_family family;
		protocol_errc code;
		std::string_view reason;
	};

	/**
	 * Read attribute value from \a span
	 *
	 * \note returned value_type reason field does not own specified
	 * range, it points into \a span. Caller should copy value if needed.
	 */
	template <typename Protocol>
	static pal::result<value_type> read (
		const basic_message_reader<Protocol> &,
		std::span<const std::byte> span) noexcept
	{
		static constexpr auto min_size_bytes = 4 * sizeof(uint8_t);
		if (span.size_bytes() >= min_size_bytes)
		{
			auto v = reinterpret_cast<const char *>(span.data());
			auto family = static_cast<address_family>(v[0]);
			if (family == address_family::v4 || family == address_family::v6)
			{
				return value_type
				{
					.family = family,
					.code = (protocol_errc)((v[2] & 0b0000'0111) * 100 + v[3]),
					.reason = std::string_view{
						v + min_size_bytes,
						span.size_bytes() - min_size_bytes
					}
				};
			}
			return make_unexpected(errc::unexpected_attribute_value);
		}
		return make_unexpected(errc::unexpected_attribute_length);
	}
};


__turner_end
